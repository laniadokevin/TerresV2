// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Terres.Data;

#nullable disable

namespace Terres.Data.Migrations
{
    [DbContext(typeof(JojmaDbContext))]
    [Migration("20250113075225_CSVFactibilidadAddID")]
    partial class CSVFactibilidadAddID
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Terres.Core.Entities.Database.BaseLotes", b =>
                {
                    b.Property<double?>("AEFOT")
                        .HasColumnType("float")
                        .HasColumnName("AE FOT");

                    b.Property<double?>("AlicuotaDiferencialPorZona")
                        .HasColumnType("float")
                        .HasColumnName("Alicuota diferencial por zona");

                    b.Property<double?>("Altura")
                        .HasColumnType("float")
                        .HasColumnName("Altura");

                    b.Property<double?>("AlturaCPU")
                        .HasColumnType("float")
                        .HasColumnName("Altura CPU");

                    b.Property<string>("AreaEspecialAgrupada")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Area especial agrupada");

                    b.Property<string>("AreaEspecialIndividualizada")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Area especial individualizada");

                    b.Property<string>("Barrio")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Barrio");

                    b.Property<double?>("CantidadDeUnidades")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad de unidades");

                    b.Property<double?>("CantidadPuertas")
                        .HasColumnType("float")
                        .HasColumnName("cantidad_puertas");

                    b.Property<string>("Catalogacion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Catalogacion");

                    b.Property<string>("Centroide")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("centroide");

                    b.Property<string>("Consolidado")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Consolidado");

                    b.Property<double?>("Cuartil1")
                        .HasColumnType("float")
                        .HasColumnName("Cuartil - 1");

                    b.Property<double?>("Cuartil2")
                        .HasColumnType("float")
                        .HasColumnName("Cuartil - 2");

                    b.Property<double?>("Cuartil3")
                        .HasColumnType("float")
                        .HasColumnName("Cuartil - 3");

                    b.Property<double?>("Cuartil4")
                        .HasColumnType("float")
                        .HasColumnName("Cuartil - 4");

                    b.Property<string>("CuartilLote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cuartil - Lote");

                    b.Property<double?>("CuartilMin")
                        .HasColumnType("float")
                        .HasColumnName("Cuartil - Min");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Direccion");

                    b.Property<string>("DistritoCPU")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Distrito CPU");

                    b.Property<string>("DistritoSegunAE")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Distrito segun AE");

                    b.Property<string>("Estado")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Estado");

                    b.Property<string>("FOT")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FOT");

                    b.Property<double?>("Fondo")
                        .HasColumnType("float")
                        .HasColumnName("Fondo");

                    b.Property<double?>("FondoSegunMBA")
                        .HasColumnType("float")
                        .HasColumnName("fondo segun MBA");

                    b.Property<double?>("Frente")
                        .HasColumnType("float")
                        .HasColumnName("Frente");

                    b.Property<double?>("FrenteSegunMBA")
                        .HasColumnType("float")
                        .HasColumnName("frente segun MBA");

                    b.Property<string>("Ley3056EdificioAnteriorA1941")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Ley3056EdificioAnteriorA1941");

                    b.Property<string>("LineaEspecialParticularizada")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Linea especial particularizada");

                    b.Property<double?>("LineaInterna")
                        .HasColumnType("float")
                        .HasColumnName("Linea interna");

                    b.Property<string>("Mixtura")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Mixtura");

                    b.Property<double?>("PdaMatriz")
                        .HasColumnType("float")
                        .HasColumnName("pdamatriz");

                    b.Property<double?>("PisosBajoRasante")
                        .HasColumnType("float")
                        .HasColumnName("pisos_bajo_rasante");

                    b.Property<double?>("PisosRegistrados")
                        .HasColumnType("float")
                        .HasColumnName("Pisos registrados");

                    b.Property<double?>("PisosSobreRasante")
                        .HasColumnType("float")
                        .HasColumnName("pisos_sobre_rasante");

                    b.Property<string>("PosicionManzana")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Posicion manzana");

                    b.Property<string>("PropiedadHorizontal")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("propiedad_horizontal");

                    b.Property<string>("Proteccion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Proteccion");

                    b.Property<string>("SEdificableB")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("S#Edificable - B");

                    b.Property<string>("SEdificableCP")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("S#Edificable - CP");

                    b.Property<string>("SEdificableR1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("S#Edificable - R1");

                    b.Property<string>("SEdificableR2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("S#Edificable - R2");

                    b.Property<string>("SM")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SM");

                    b.Property<string>("SMP")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SMP");

                    b.Property<string>("SmpAnterior")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("smp_anterior");

                    b.Property<string>("SmpSiguiente")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("smp_siguiente");

                    b.Property<double?>("SuperficieCubierta")
                        .HasColumnType("float")
                        .HasColumnName("superficie_cubierta");

                    b.Property<double?>("SuperficieEdificada")
                        .HasColumnType("float")
                        .HasColumnName("Superficie edificada");

                    b.Property<double?>("SuperficieParcela")
                        .HasColumnType("float")
                        .HasColumnName("Superficie parcela");

                    b.Property<double?>("SuperficieTotal")
                        .HasColumnType("float")
                        .HasColumnName("superficie_total");

                    b.Property<string>("TipoManzana")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Tipo manzana");

                    b.Property<string>("Unidad")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Unidad");

                    b.Property<double?>("UnidadesFuncionales")
                        .HasColumnType("float")
                        .HasColumnName("unidades_funcionales");

                    b.Property<double?>("ValorIncidenciaDeSuelo")
                        .HasColumnType("float")
                        .HasColumnName("Valor incidencia de suelo");

                    b.ToTable("BaseLotes", (string)null);
                });

            modelBuilder.Entity("Terres.Core.Entities.Database.CSVFactibilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ALICUOTA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BARRIO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BARRIO2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BARRIO3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CATALOGACION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CONTRIBUCIONUSD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CONTRIBUCIONUVA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPU_ALTURA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPU_CAPVEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPU_FOT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPU_ZONFI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CU_ALTURA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CU_MIX")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CU_PR1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CU_PR2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CU_PTIPO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CU_UEDIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIR9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EDIFADI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ESTADO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXTENSION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA1_ACUM_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA1_ACUM_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA1_CUB_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA1_CUB_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA1_EXP_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA1_EXP_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA1_PISOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA1_TITULO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA2_ACUM_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA2_ACUM_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA2_CUB_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA2_CUB_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA2_EXP_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA2_EXP_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA2_PISOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA2_TITULO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA3_ACUM_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA3_ACUM_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA3_CUB_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA3_CUB_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA3_EXP_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA3_EXP_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA3_PISOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA3_TITULO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA4_ACUM_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA4_ACUM_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA4_CUB_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA4_CUB_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA4_EXP_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA4_EXP_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA4_PISOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA4_TITULO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA5_ACUM_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA5_ACUM_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA5_CUB_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA5_CUB_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA5_EXP_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA5_EXP_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA5_PISOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA5_TITULO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA6_ACUM_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA6_ACUM_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA6_CUB_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA6_CUB_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA6_EXP_C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA6_EXP_V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA6_PISOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILA6_TITULO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FONDO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FONDO1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FRENTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FRENTE1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INCIDENCIA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LEY_3056")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MVC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MVE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MVT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PROTECCION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SUP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SUPEDIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TIPO_MANZANA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UVA")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CSVFactibilidad", (string)null);
                });

            modelBuilder.Entity("Terres.Core.Entities.Database.JojmaUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Terres.Core.Entities.Database.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("lvl")
                        .HasColumnType("int");

                    b.HasKey("LogID");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("Terres.Core.Entities.Database.Lote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoLoteId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TipoLoteId");

                    b.HasIndex("UserId");

                    b.ToTable("Lote");
                });

            modelBuilder.Entity("Terres.Core.Entities.Database.TipoLote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoLote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Terres.Core.Entities.Database.JojmaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Terres.Core.Entities.Database.JojmaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Terres.Core.Entities.Database.JojmaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Terres.Core.Entities.Database.JojmaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Terres.Core.Entities.Database.Lote", b =>
                {
                    b.HasOne("Terres.Core.Entities.Database.TipoLote", "TipoLote")
                        .WithMany()
                        .HasForeignKey("TipoLoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Terres.Core.Entities.Database.JojmaUser", "User")
                        .WithMany("Lotes")
                        .HasForeignKey("UserId");

                    b.Navigation("TipoLote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Terres.Core.Entities.Database.JojmaUser", b =>
                {
                    b.Navigation("Lotes");
                });
#pragma warning restore 612, 618
        }
    }
}
